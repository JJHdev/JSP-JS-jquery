## 1. jquery 사용
https://jquery.com/download/ 사이트에 들어가서 . 오른쪽 다운로드에 들어가서 >
1-1 .Download the compressed, production jQuery 3.6.3
1-2 .Download the uncompressed, development jQuery 3.6.3 작업파일 중 pro1(web content중)파일 하나 만들어서 다운받기.
1-3 -다운받을때는클릭후안에글씨를 오른쪽 클릭해서 다른이름으로 다운받기 하기. 
1-4. 선생님은 다운받은 사이트에서 맨아래 내려가면 cdn을 클릭후 2.x에서  uncompressed도 다운받으셨음. 
    복사해서 하나의 base파일에다가 head에 붙여넣고 cdn방식으로 넣으셨음. 
<!DOCTYPE html>
<html lang="ko">
    <head>
        <title></title>
        <meta charset="utf-8">
        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/normalize/8.0.1/normalize.min.css">  
        <!-- download방식으로 jquery 방식 연동 -->
        <link href="http://js/jquery-3.6.3.js">
         <!-- CDN방식으로 JQuery연동 -->
        <script src="https://code.jquery.com/jquery-2.2.4.js"></script>
      <style>
      </style>
    </head>
    <body>

    </body>
</html>
위에 둘중 하나의 방식으로 하면된다.

하나의 방식을 선택하고 
```
<!DOCTYPE html>
<html lang="ko">
    <head>
        <title></title>
        <meta charset="utf-8">
        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/normalize/8.0.1/normalize.min.css">  
        <!-- download방식으로 jquery 방식 연동 -->
        <script src="js/jquery-3.6.3.min.js"></script>
         <!-- CDN방식으로 JQuery연동 -->
        <!-- <script src="https://code.jquery.com/jquery-2.2.4.js"></script> -->
      <style>
      </style>
      <script> $(document).ready(function(){
    	  alert('jquery연결성공');
      });
      </script>
    </head>
    <body>
    </body>
</html>
```
1-5. 으로 실행해서 alert가 실행되면 jquery 연결이 성공된것이다.

### 2-1. 서블릿 web.xml을 이용한 서버주소 호출시 자동 호출하기.
  - web.xml 설정 방법
  ```
  <?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://xmlns.jcp.org/xml/ns/javaee" xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd" id="WebApp_ID" version="4.0">
  <display-name>webPro</display-name>
  <welcome-file-list>
    <welcome-file>index.html</welcome-file>
    <welcome-file>index.htm</welcome-file>
    <welcome-file>index.jsp</welcome-file>
    <welcome-file>default.html</welcome-file>
    <welcome-file>default.htm</welcome-file>
    <welcome-file>default.jsp</welcome-file>
  </welcome-file-list>
  
  <!-- xml주석문 -->
  <!-- p409참고 
    서버올라갈때  웹어플리케이션에 대한 정보를 읽어들이게 된다.
    따라서 해당 어플리케이션에 대한 각 종 환경을 설정할 때 이 문서에 작성하면 된다.
    web.xml문서는 web 어플리케이션에 대한 환경설정
    
  문법
  <servlet>
    <servlet-name>서블릿네임</servlet-name>
    <servlet-class>패키지명.클래스명</servlet-class>
    <load-on-startup>로딩순서</load-on-startup>
  </servlet>
  -->
  
  <!-- 웹 어플리케이션 구동시  JDBC(MySQL용 Driver) 로딩하기
     웹 어플리케이션이 시작될 때 자동으로 JDBC드라이버를 로딩하도록 만들면 된다 
  <servlet>
    <servlet-name>mysqlDriverLoader</servlet-name>
    <servlet-class>jdbc.MySQLDriverLoader</servlet-class>
    <load-on-startup>2</load-on-startup>
  </servlet>
  -->
  
  <!-- 커넥션 풀 초기화 서블릿 설정(p420)
       아래 코드를 추가하면 
       웹 어플리케이션이 시작할 때 DBCPInit서블릿 클래스가 자동으로 시작되고
       init()메서드가 호출된다-->
  <servlet>
    <servlet-name>DBCPInit</servlet-name>
    <servlet-class>jdbc.DBCPInit</servlet-class>
    <load-on-startup>1</load-on-startup>
  </servlet>
  
</web-app>
```

### 2-2. DBCP이용한 커넥션풀 사용
- 선생님이 주신 lib.7z파일 (https://commons.apache.org/proper/commons-dbcp/download_dbcp.cgi) 여기서 받으셨다.  압축풀고 
- 이파일을 사용한 다이나믹웹프로젝트 에서 lib파일에 3개 파일 넣기.(1.commons-dbcp2-2.8.0       2. commons-logging-1.2      3.commons-pool2-2.9.0) 이 3가지 파일 넣기.
- SRC폴더안에 DBCpinit라는 클래스 생성후 슈퍼클래스는 HTTPServlet 상속받기. 아래코드와 같이 작성하기.
```
package jdbc;

import java.io.IOException;
import java.sql.DriverManager;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.dbcp2.ConnectionFactory;
import org.apache.commons.dbcp2.DriverManagerConnectionFactory;
import org.apache.commons.dbcp2.PoolableConnection;
import org.apache.commons.dbcp2.PoolableConnectionFactory;
import org.apache.commons.dbcp2.PoolingDriver;
import org.apache.commons.pool2.impl.GenericObjectPool;
import org.apache.commons.pool2.impl.GenericObjectPoolConfig;

public class DBCPInit extends HttpServlet {
 
	@Override
	//웹 어플리케이션 시작시 단 한번만 호출
	public void init() throws ServletException {
	 System.out.println("init()호출");
	 	loadJDBCDriver();
	 	initConnectionPool();
	}
	
	public void loadJDBCDriver() { 
	//1.JDBC Driver등록
	try {
		Class.forName("com.mysql.jdbc.Driver");
		System.out.println("init 실행.");
	} catch (ClassNotFoundException e) {
		System.out.println("ClassNotFoundException발생 e="+e);
		e.printStackTrace();
	}
	System.out.println("1.JDBC Driver등록-성공");
	}//loadJDBCDriver()끝)
	
	//커넥션 풀 설정
	private void initConnectionPool() {
	      try {
	         String jdbcUrl = 
	               "jdbc:mysql://localhost:3306/chap14?" + 
	               "useUnicode=true&characterEncoding=utf8";
	         String username = "jspexam";
	         String pw = "jsppw";

	         ConnectionFactory connFactory = 
	               new DriverManagerConnectionFactory(jdbcUrl, username, pw);

	         PoolableConnectionFactory poolableConnFactory = 
	               new PoolableConnectionFactory(connFactory, null);
	         poolableConnFactory.setValidationQuery("select 1");

	         GenericObjectPoolConfig poolConfig = new GenericObjectPoolConfig();
	         poolConfig.setTimeBetweenEvictionRunsMillis(1000L * 60L * 5L);
	         poolConfig.setTestWhileIdle(true);
	         poolConfig.setMinIdle(4);
	         poolConfig.setMaxTotal(50);

	         GenericObjectPool<PoolableConnection> connectionPool = 
	               new GenericObjectPool<>(poolableConnFactory, poolConfig);
	         poolableConnFactory.setPool(connectionPool);
	         
	         Class.forName("org.apache.commons.dbcp2.PoolingDriver");
	         PoolingDriver driver = 
	               (PoolingDriver) DriverManager.getDriver("jdbc:apache:commons:dbcp:");
	         driver.registerPool("chap14", connectionPool);
	      } catch (Exception e) {
	         throw new RuntimeException(e);
	      }
	   }//initConnectionPool 의 끝
	
	
	
 @Override
 	//종료시 호출
	public void destroy() {
	 System.out.println("destroy()호출");
		super.destroy();
	}
 
 @Override
 	//get방식으로 요청시 호출
	protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
	 System.out.println("doGet()호출");
		super.doGet(req, resp);
	}
 
 @Override
 	//post방식으로 요청시 호출
	protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
	 System.out.println("doPost()호출");
		super.doPost(req, resp);
	}
}
```
